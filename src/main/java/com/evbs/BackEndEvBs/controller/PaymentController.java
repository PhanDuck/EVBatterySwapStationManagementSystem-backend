package com.evbs.BackEndEvBs.controller;

import com.evbs.BackEndEvBs.entity.Payment;
import com.evbs.BackEndEvBs.service.MoMoService;
import com.evbs.BackEndEvBs.service.PaymentService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/payment")
@SecurityRequirement(name = "api")
@Tag(name = "Payment Management", description = "APIs for payment processing")
public class PaymentController {

    @Autowired
    private PaymentService paymentService;

    @Autowired
    private MoMoService moMoService;

    // ==================== READ ENDPOINTS ====================

    @GetMapping
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "Get all payments", description = "Get all payments (Admin only)")
    public ResponseEntity<List<Payment>> getAllPayments() {
        List<Payment> payments = paymentService.getAllPayments();
        return ResponseEntity.ok(payments);
    }

    @GetMapping("/my-payments")
    @PreAuthorize("hasRole('DRIVER')")
    @Operation(summary = "Get my payments", description = "Get payments for current driver")
    public ResponseEntity<List<Payment>> getMyPayments() {
        List<Payment> payments = paymentService.getMyPayments();
        return ResponseEntity.ok(payments);
    }

    // ==================== üí≥ MOMO PAYMENT ====================

    /**
     * T·∫†O MOMO PAYMENT URL
     * 
     * WORKFLOW:
     * BUOC 1: Driver ch·ªçn g√≥i d·ªãch v·ª• (packageId)
     * BUOC 2: Driver g·ªçi API n√†y - System t·∫°o MoMo payment URL
     * BUOC 3: Driver redirect ƒë·∫øn MoMo app/website
     * BUOC 4: Driver thanh to√°n tr√™n MoMo
     * BUOC 5: MoMo redirect v·ªÅ redirectUrl (callback - c√≥ th·ªÉ t·ª´ frontend)
     * BUOC 6: System T·ª∞ ƒê·ªòNG T·∫†O subscription ACTIVE
     * BUOC 7: Driver c√≥ th·ªÉ swap pin MI·ªÑN PH√ç ngay l·∫≠p t·ª©c
     * 
     * @param packageId ID c·ªßa g√≥i d·ªãch v·ª• mu·ªën mua
     * @param redirectUrl (Optional) URL ƒë·ªÉ MoMo redirect sau thanh to√°n. 
     *                    N·∫øu kh√¥ng truy·ªÅn, d√πng URL m·∫∑c ƒë·ªãnh t·ª´ config.
     *                    V√≠ d·ª•: http://localhost:3000/payment-result
     * @return Map ch·ª©a paymentUrl ƒë·ªÉ redirect driver
     */
    @PostMapping("/momo/create")
    @PreAuthorize("hasRole('DRIVER')")
    @Operation(summary = "T·∫°o MoMo payment URL ƒë·ªÉ mua g√≥i d·ªãch v·ª•",
            description = "T·∫°o URL thanh to√°n MoMo. Frontend c√≥ th·ªÉ truy·ªÅn redirectUrl t√πy ch·ªânh. Subscription CH·ªà ƒë∆∞·ª£c t·∫°o SAU KHI thanh to√°n th√†nh c√¥ng.")
    public ResponseEntity<Map<String, String>> createMoMoPayment(
            @RequestParam Long packageId,
            @RequestParam(required = false) String redirectUrl) {
        Map<String, String> result = moMoService.createPaymentUrl(packageId, redirectUrl);
        return ResponseEntity.ok(result);
    }

    /**
     * MOMO IPN (INSTANT PAYMENT NOTIFICATION)
     * 
     * Webhook t·ª´ MoMo ƒë·ªÉ confirm payment
     * X·ª≠ l√Ω gi·ªëng /momo-return
     * 
     * QUAN TR·ªåNG: KH√îNG C·∫¶N TOKEN - ƒê√¢y l√† webhook t·ª´ MoMo server
     * 
     * @param request HttpServletRequest ch·ª©a IPN params t·ª´ MoMo
     * @return Map ch·ª©a k·∫øt qu·∫£ x·ª≠ l√Ω
     */
    @PostMapping("/momo-ipn")
    @Operation(summary = "MoMo IPN webhook", 
            description = "Webhook t·ª´ MoMo ƒë·ªÉ confirm payment. X·ª≠ l√Ω gi·ªëng momo-return.")
    public ResponseEntity<Map<String, Object>> moMoIPN(@RequestBody Map<String, String> momoData) {
        Map<String, Object> result = moMoService.handleMoMoIPN(momoData);
        return ResponseEntity.ok(result);
    }
}